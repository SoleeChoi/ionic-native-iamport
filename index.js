var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var IamportCordovaOriginal = /** @class */ (function (_super) {
    __extends(IamportCordovaOriginal, _super);
    function IamportCordovaOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IamportCordovaOriginal.prototype.payment = function (paymentObject) { return cordova(this, "payment", {}, arguments); };
    IamportCordovaOriginal.prototype.certification = function (certificationObject) { return cordova(this, "certification", {}, arguments); };
    IamportCordovaOriginal.pluginName = "IamportCordova";
    IamportCordovaOriginal.plugin = "iamport-cordova";
    IamportCordovaOriginal.pluginRef = "cordova.plugins.IamportCordova";
    IamportCordovaOriginal.repo = "https://github.com/iamport/iamport-cordova";
    IamportCordovaOriginal.install = "";
    IamportCordovaOriginal.installVariables = [];
    IamportCordovaOriginal.platforms = ["ios", "android"];
    return IamportCordovaOriginal;
}(IonicNativePlugin));
var IamportCordova = new IamportCordovaOriginal();
export { IamportCordova };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2lhbXBvcnQtY29yZG92YS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBWUEsT0FBTyw4QkFBMEYsTUFBTSxvQkFBb0IsQ0FBQzs7SUE2RnhGLGtDQUFpQjs7OztJQVNuRCxnQ0FBTyxhQUFDLGFBQTRCO0lBS3BDLHNDQUFhLGFBQUMsbUJBQXdDOzs7Ozs7Ozt5QkF2SHhEO0VBeUdvQyxpQkFBaUI7U0FBeEMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBpcyBhIHRlbXBsYXRlIGZvciBuZXcgcGx1Z2luIHdyYXBwZXJzXG4gKlxuICogVE9ETzpcbiAqIC0gQWRkL0NoYW5nZSBpbmZvcm1hdGlvbiBiZWxvd1xuICogLSBEb2N1bWVudCB1c2FnZSAoaW1wb3J0aW5nLCBleGVjdXRpbmcgbWFpbiBmdW5jdGlvbmFsaXR5KVxuICogLSBSZW1vdmUgYW55IGltcG9ydHMgdGhhdCB5b3UgYXJlIG5vdCB1c2luZ1xuICogLSBSZW1vdmUgYWxsIHRoZSBjb21tZW50cyBpbmNsdWRlZCBpbiB0aGlzIHRlbXBsYXRlLCBFWENFUFQgdGhlIEBQbHVnaW4gd3JhcHBlciBkb2NzIGFuZCBhbnkgb3RoZXIgZG9jcyB5b3UgYWRkZWRcbiAqIC0gUmVtb3ZlIHRoaXMgbm90ZVxuICpcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIENvcmRvdmFJbnN0YW5jZSwgSW5zdGFuY2VQcm9wZXJ0eSwgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5kZWNsYXJlIGNvbnN0IGNvcmRvdmE6IENvcmRvdmE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5bWVudE9iamVjdCB7XG4gIHRpdGxlPzogVGl0bGVEYXRhO1xuICB1c2VyQ29kZTogc3RyaW5nO1xuICBkYXRhOiBQYXltZW50RGF0YTtcbiAgY2FsbGJhY2s6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDZXJ0aWZpY2F0aW9uT2JqZWN0IHtcbiAgdGl0bGU/OiBUaXRsZURhdGE7XG4gIHVzZXJDb2RlOiBzdHJpbmc7XG4gIGRhdGE6IENlcnRpZmljYXRpb25EYXRhO1xuICBjYWxsYmFjazogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRpdGxlRGF0YSB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGNvbG9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnREYXRhIHtcbiAgcGc/OiBzdHJpbmc7XG4gIHBheV9tZXRob2Q/OiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgbWVyY2hhbnRfdWlkPzogc3RyaW5nO1xuICBhbW91bnQ6IHN0cmluZztcbiAgYnV5ZXJfbmFtZT86IHN0cmluZztcbiAgYnV5ZXJfdGVsPzogc3RyaW5nO1xuICBidXllcl9lbWFpbD86IHN0cmluZztcbiAgYnV5ZXJfYWRkcj86IHN0cmluZztcbiAgYnV5ZXJfcG9zdGNvZGU/OiBzdHJpbmc7XG4gIGFwcF9zY2hlbWU6IHN0cmluZztcbiAgY3VzdG9tX2RhdGE/OiBhbnk7XG4gIG5vdGljZV91cmw/OiBzdHJpbmc7XG4gIGVzY3Jvdz86IGJvb2xlYW47XG4gIGRpZ2l0YWw/OiBib29sZWFuO1xuICBkaXNwbGF5Pzoge1xuICAgIGNhcmRfcXVvdGE/OiBbbnVtYmVyXTtcbiAgfTtcbiAgY3VycmVuY3k/OiBzdHJpbmc7XG4gIGN1c3RvbWVyX3VpZD86IHN0cmluZztcbiAgdGF4X2ZyZWU/OiBzdHJpbmc7XG4gIGxhbmd1YWdlPzogc3RyaW5nO1xuICB2YmFua19kdWU/OiBzdHJpbmc7XG4gIGJpel9udW0/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2VydGlmaWNhdGlvbkRhdGEge1xuICBjb21wYW55Pzogc3RyaW5nO1xuICBwaG9uZT86IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgY2Fycmllcj86IHN0cmluZztcbiAgYmlydGg/OiBzdHJpbmc7XG4gIG1lcmNoYW50X3VpZD86IHN0cmluZztcbiAgbWluX2FnZT86IHN0cmluZztcbiAgcG9wdXA/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIElhbXBvcnQgQ29yZG92YVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBkb2VzIHNvbWV0aGluZ1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgSWFtcG9ydENvcmRvdmEgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2lhbXBvcnQtY29yZG92YSc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaWFtcG9ydENvcmRvdmE6IElhbXBvcnRDb3Jkb3ZhKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5pYW1wb3J0Q29yZG92YS5mdW5jdGlvbk5hbWUoJ0hlbGxvJywgMTIzKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0lhbXBvcnRDb3Jkb3ZhJyxcbiAgcGx1Z2luOiAnaWFtcG9ydC1jb3Jkb3ZhJywgLy8gbnBtIHBhY2thZ2UgbmFtZSwgZXhhbXBsZTogY29yZG92YS1wbHVnaW4tY2FtZXJhXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5JYW1wb3J0Q29yZG92YScsIC8vIHRoZSB2YXJpYWJsZSByZWZlcmVuY2UgdG8gY2FsbCB0aGUgcGx1Z2luLCBleGFtcGxlOiBuYXZpZ2F0b3IuZ2VvbG9jYXRpb25cbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9pYW1wb3J0L2lhbXBvcnQtY29yZG92YScsIC8vIHRoZSBnaXRodWIgcmVwb3NpdG9yeSBVUkwgZm9yIHRoZSBwbHVnaW5cbiAgaW5zdGFsbDogJycsIC8vIE9QVElPTkFMIGluc3RhbGwgY29tbWFuZCwgaW4gY2FzZSB0aGUgcGx1Z2luIHJlcXVpcmVzIHZhcmlhYmxlc1xuICBpbnN0YWxsVmFyaWFibGVzOiBbXSwgLy8gT1BUSU9OQUwgdGhlIHBsdWdpbiByZXF1aXJlcyB2YXJpYWJsZXNcbiAgcGxhdGZvcm1zOiBbJ2lvcycsICdhbmRyb2lkJ10gLy8gQXJyYXkgb2YgcGxhdGZvcm1zIHN1cHBvcnRlZCwgZXhhbXBsZTogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIElhbXBvcnRDb3Jkb3ZhIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGRvZXMgc29tZXRoaW5nXG4gICAqIEBwYXJhbSBhcmcxIHtzdHJpbmd9IFNvbWUgcGFyYW0gdG8gY29uZmlndXJlIHNvbWV0aGluZ1xuICAgKiBAcGFyYW0gYXJnMiB7bnVtYmVyfSBBbm90aGVyIHBhcmFtIHRvIGNvbmZpZ3VyZSBzb21ldGhpbmdcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcGF5bWVudChwYXltZW50T2JqZWN0OiBQYXltZW50T2JqZWN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gY29yZG92YS5wbHVnaW5zLklhbXBvcnRDb3Jkb3ZhLnBheW1lbnQocGF5bWVudE9iamVjdCk7IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cbiAgQENvcmRvdmEoKVxuICBjZXJ0aWZpY2F0aW9uKGNlcnRpZmljYXRpb25PYmplY3Q6IENlcnRpZmljYXRpb25PYmplY3QpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBjb3Jkb3ZhLnBsdWdpbnMuSWFtcG9ydENvcmRvdmEuY2VydGlmaWNhdGlvbihjZXJ0aWZpY2F0aW9uT2JqZWN0KTsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXG4gIH1cbn1cbiJdfQ==